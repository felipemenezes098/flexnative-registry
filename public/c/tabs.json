{
  "name": "tabs",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": ["@rn-primitives/tabs"],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "tabs.tsx",
      "content": "import React from \"react\";\nimport { StyleSheet, PressableStateCallbackType } from \"react-native\";\nimport * as TabsPrimitive from \"@rn-primitives/tabs\";\nimport { Text } from \"@/components/ui/text\";\nimport { View } from \"@/components/ui/view\";\nimport { getThemeColors } from \"@/theme/theme-colors\";\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ style, ...props }, ref) => {\n  const colors = getThemeColors();\n  return (\n    <TabsPrimitive.List\n      ref={ref}\n      style={[styles.list, { backgroundColor: colors.muted }, style]}\n      {...props}\n    />\n  );\n});\nTabsList.displayName = \"TabsList\";\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ style, children, value, disabled, ...props }, ref) => {\n  const { value: activeTab } = TabsPrimitive.useRootContext();\n  const colors = getThemeColors();\n  return (\n    <TabsPrimitive.Trigger\n      ref={ref}\n      value={value}\n      style={(state: PressableStateCallbackType) => [\n        styles.trigger,\n        activeTab === value && {\n          borderColor: colors[\"primary-foreground\"],\n          backgroundColor: colors.background,\n        },\n        disabled && {\n          opacity: 0.5,\n        },\n        state.pressed && styles.triggerPressed,\n        typeof style === \"function\" ? style(state) : style,\n      ]}\n      disabled={disabled}\n      {...props}\n    >\n      {typeof children === \"function\" ? (\n        children\n      ) : (\n        <Text\n          style={[\n            styles.triggerText,\n            {\n              color:\n                activeTab === value\n                  ? colors.primary\n                  : colors[\"muted-foreground\"],\n              fontWeight: activeTab === value ? \"bold\" : \"normal\",\n            },\n          ]}\n        >\n          {children}\n        </Text>\n      )}\n    </TabsPrimitive.Trigger>\n  );\n});\nTabsTrigger.displayName = \"TabsTrigger\";\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ style, children, ...props }, ref) => (\n  <TabsPrimitive.Content ref={ref} style={[styles.content, style]} {...props}>\n    <View style={styles.contentContainer}>{children}</View>\n  </TabsPrimitive.Content>\n));\nTabsContent.displayName = \"TabsContent\";\n\nconst styles = StyleSheet.create({\n  list: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    marginBottom: 10,\n    padding: 4,\n    borderRadius: 8,\n  },\n  trigger: {\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    borderRadius: 8,\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  triggerPressed: {},\n  triggerText: {\n    fontSize: 14,\n    fontWeight: \"500\",\n  },\n  content: {},\n  contentContainer: {\n    flexDirection: \"column\",\n  },\n});\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent };"
    }
  ]
}
