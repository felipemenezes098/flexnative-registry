{
  "name": "accordion",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "accordion.tsx",
      "content": "import React, { createContext, useContext, useState, ReactNode } from \"react\";\nimport { Pressable, View, StyleSheet, Animated, StyleProp } from \"react-native\";\n\nimport { getThemeColors } from \"@/theme/theme-colors\";\nimport { ViewStyle } from \"react-native\";\n\ninterface AccordionContextType {\n  expandedItems: string[];\n  toggleItem: (itemValue: string) => void;\n  animated: boolean;\n}\n\ninterface AccordionRootProps {\n  children: ReactNode;\n  multiple?: boolean;\n  style?: StyleProp<ViewStyle>;\n  defaultValue?: string[];\n  onValueChange?: (expandedItems: string[]) => void;\n  animated?: boolean;\n}\n\ninterface AccordionItemProps {\n  value: string;\n  children: ReactNode;\n  style?: StyleProp<ViewStyle>;\n}\n\ninterface AccordionTriggerProps {\n  children: ReactNode | ((props: { isExpanded: boolean }) => ReactNode);\n  style?: StyleProp<ViewStyle>;\n}\n\ninterface AccordionContentProps {\n  children: ReactNode | ((props: { isExpanded: boolean }) => ReactNode);\n  style?: StyleProp<ViewStyle>;\n}\n\nconst AccordionContext = createContext<AccordionContextType | null>(null);\nconst AccordionItemContext = createContext<{\n  value: string;\n  isExpanded: boolean;\n} | null>(null);\n\nconst AccordionRoot = ({\n  children,\n  multiple = false,\n  defaultValue = [],\n  onValueChange,\n  animated = true, // Controle da animação\n  style,\n}: AccordionRootProps) => {\n  const [expandedItems, setExpandedItems] = useState<string[]>(defaultValue);\n\n  const toggleItem = (itemValue: string) => {\n    setExpandedItems((prev) => {\n      const isExpanded = prev.includes(itemValue);\n      let newExpanded: string[];\n      if (multiple) {\n        newExpanded = isExpanded\n          ? prev.filter((value) => value !== itemValue)\n          : [...prev, itemValue];\n      } else {\n        newExpanded = isExpanded ? [] : [itemValue];\n      }\n      onValueChange?.(newExpanded);\n      return newExpanded;\n    });\n  };\n\n  return (\n    <AccordionContext.Provider value={{ expandedItems, toggleItem, animated }}>\n      <View style={style}>{children}</View>\n    </AccordionContext.Provider>\n  );\n};\n\nconst AccordionItem = ({ value, children, style }: AccordionItemProps) => {\n  const context = useContext(AccordionContext);\n  if (!context) {\n    throw new Error(\"AccordionItem must be used within an AccordionRoot\");\n  }\n\n  const colors = getThemeColors();\n  const isExpanded = context.expandedItems.includes(value);\n\n  return (\n    <View style={[styles.item, { borderBottomColor: colors.border }, style]}>\n      <AccordionItemContext.Provider value={{ value, isExpanded }}>\n        {children}\n      </AccordionItemContext.Provider>\n    </View>\n  );\n};\n\nconst useAccordionItemContext = () => {\n  const context = useContext(AccordionItemContext);\n  if (!context) {\n    throw new Error(\"Accordion components must be used within AccordionItem\");\n  }\n  return context;\n};\n\nconst AccordionTrigger = ({\n  children,\n  style,\n  ...props\n}: AccordionTriggerProps & { isExpanded?: boolean }) => {\n  const { toggleItem } = useContext(AccordionContext) as AccordionContextType;\n  const { value, isExpanded } = useAccordionItemContext();\n\n  return (\n    <Pressable\n      onPress={() => toggleItem(value)}\n      style={[styles.header, isExpanded && styles.headerExpanded, style]}\n      {...props}\n    >\n      {typeof children === \"function\" ? children({ isExpanded }) : children}\n    </Pressable>\n  );\n};\n\nconst AccordionContent = ({\n  children,\n  style,\n  ...props\n}: AccordionContentProps & { isExpanded?: boolean }) => {\n  const { isExpanded } = useAccordionItemContext();\n  const { animated } = useContext(AccordionContext) as AccordionContextType;\n  const height = React.useRef(new Animated.Value(0)).current;\n  const [contentHeight, setContentHeight] = React.useState<number | null>(null);\n\n  const measureContent = (event: any) => {\n    const { height: measuredHeight } = event.nativeEvent.layout;\n    if (contentHeight === null) {\n      setContentHeight(measuredHeight);\n    }\n  };\n\n  React.useEffect(() => {\n    if (contentHeight !== null) {\n      if (animated) {\n        Animated.timing(height, {\n          toValue: isExpanded ? contentHeight : 0,\n          duration: 150,\n          useNativeDriver: false,\n        }).start();\n      } else {\n        height.setValue(isExpanded ? contentHeight : 0);\n      }\n    }\n  }, [isExpanded, contentHeight, animated]);\n\n  return (\n    <Animated.View\n      style={[\n        {\n          height: contentHeight === null ? \"auto\" : height,\n        },\n        style,\n      ]}\n      {...props}\n    >\n      <View onLayout={measureContent} style={styles.contentContainer}>\n        {typeof children === \"function\" ? children({ isExpanded }) : children}\n      </View>\n    </Animated.View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  item: {\n    marginBottom: 10,\n    borderRadius: 5,\n    overflow: \"hidden\",\n    borderBottomWidth: 1,\n  },\n  header: {\n    paddingVertical: 15,\n  },\n  headerExpanded: {},\n  contentContainer: {\n    paddingVertical: 10,\n    paddingBottom: 15,\n  },\n});\n\nexport { AccordionRoot, AccordionItem, AccordionTrigger, AccordionContent };"
    }
  ]
}
