{
  "name": "accordion",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": ["@rn-primitives/accordion"],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "accordion.tsx",
      "content": "import * as React from \"react\";\nimport { StyleSheet, PressableStateCallbackType } from \"react-native\";\nimport * as AccordionPrimitive from \"@rn-primitives/accordion\";\nimport Animated, {\n  useAnimatedStyle,\n  useSharedValue,\n  withTiming,\n  Easing\n} from \"react-native-reanimated\";\nimport { getThemeColors } from \"@/theme/theme-colors\";\n\nimport { View } from \"@/components/ui/view\";\nimport { Text } from \"@/components/ui/text\";\n\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\n\nconst Accordion = AccordionPrimitive.Root;\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ style, ...props }, ref) => {\n  const colors = getThemeColors();\n  return (\n    <AccordionPrimitive.Item\n      ref={ref}\n      style={[styles.item, style, { borderColor: colors.border }]}\n      {...props}\n    />\n  );\n});\nAccordionItem.displayName = \"AccordionItem\";\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ style, children, ...props }, ref) => {\n  const colors = getThemeColors();\n  const { isExpanded } = AccordionPrimitive.useItemContext();\n\n  const rotation = useSharedValue(0);\n  React.useEffect(() => {\n    rotation.value = withTiming(isExpanded ? 180 : 0, {\n      duration: 300,\n      easing: Easing.ease\n    });\n  }, [isExpanded]);\n\n  const chevronStyle = useAnimatedStyle(() => {\n    return {\n      transform: [{ rotate: rotation.value + \"deg\" }]\n    };\n  });\n\n  return (\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      style={(state: PressableStateCallbackType) => [\n        styles.trigger,\n        state.pressed && styles.triggerPressed,\n        typeof style === \"function\" ? style(state) : style\n      ]}\n      {...props}\n    >\n      {typeof children === \"function\" ? (\n        children\n      ) : (\n        <View style={styles.triggerContent}>\n          <Text style={styles.triggerText}>{children}</Text>\n          <Animated.View style={chevronStyle}>\n            <Ionicons name=\"chevron-down\" color={colors.primary} size={18} />\n          </Animated.View>\n        </View>\n      )}\n    </AccordionPrimitive.Trigger>\n  );\n});\nAccordionTrigger.displayName = \"AccordionTrigger\";\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ style, children, forceMount, ...props }, ref) => {\n  const { isExpanded } = AccordionPrimitive.useItemContext();\n\n  const height = useSharedValue(0);\n  const [measuredHeight, setMeasuredHeight] = React.useState(0);\n\n  const onLayout = React.useCallback((event: any) => {\n    const { height } = event.nativeEvent.layout;\n    setMeasuredHeight(height);\n  }, []);\n\n  React.useEffect(() => {\n    if (!forceMount) {\n      height.value = withTiming(isExpanded ? measuredHeight : 0, {\n        duration: 300,\n        easing: Easing.out(Easing.ease)\n      });\n    }\n  }, [isExpanded, measuredHeight, forceMount]);\n\n  const animatedStyle = useAnimatedStyle(() => ({\n    height: forceMount ? measuredHeight : height.value,\n    overflow: forceMount ? \"visible\" : \"hidden\"\n  }));\n\n  return (\n    <Animated.View style={[styles.content, animatedStyle]} {...props}>\n      <View onLayout={onLayout} style={styles.hiddenContent}>\n        {children}\n      </View>\n    </Animated.View>\n  );\n});\nAccordionContent.displayName = \"AccordionContent\";\n\nconst styles = StyleSheet.create({\n  item: {\n    borderBottomWidth: 1,\n    marginBottom: 10,\n    borderRadius: 5,\n    overflow: \"hidden\"\n  },\n  triggerContent: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  },\n  trigger: {\n    paddingVertical: 15,\n    paddingHorizontal: 10\n  },\n  triggerPressed: {\n    opacity: 0.8\n  },\n  triggerText: {\n    fontSize: 16,\n    fontWeight: \"500\"\n  },\n  content: {\n    overflow: \"hidden\"\n  },\n  hiddenContent: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    right: 0,\n    paddingHorizontal: 10,\n    paddingBottom: 15\n  }\n});\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };"
    }
  ]
}
