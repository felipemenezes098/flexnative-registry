{
  "name": "button",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "button.tsx",
      "content": "import React from \"react\";\nimport {\n  Text,\n  TouchableOpacity,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  TouchableOpacityProps,\n} from \"react-native\";\nimport { getThemeColors } from \"@/theme/theme-colors\";\n\ninterface ButtonProps {\n  label?: string;\n  icon?: React.ReactNode;\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  iconStyle?: StyleProp<ViewStyle>;\n  variant?: \"default\" | \"secondary\" | \"destructive\" | \"ghost\" | \"outline\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n  disabled?: boolean;\n}\n\nconst Button: React.FC<ButtonProps & TouchableOpacityProps> = ({\n  label,\n  icon,\n  onPress,\n  style,\n  labelStyle,\n  iconStyle,\n  variant = \"default\",\n  size = \"default\",\n  disabled,\n  ...props\n}) => {\n  const colors = getThemeColors();\n\n  let backgroundColor: string | undefined;\n  let textColor: string | undefined;\n  let borderColor: string | undefined;\n\n  switch (variant) {\n    case \"default\":\n      backgroundColor = colors.primary;\n      textColor = colors[\"primary-foreground\"];\n      break;\n    case \"secondary\":\n      backgroundColor = colors.muted;\n      textColor = colors[\"primary\"];\n      break;\n    case \"destructive\":\n      backgroundColor = colors.destructive;\n      textColor = colors[\"destructive-foreground\"];\n      break;\n    case \"ghost\":\n      backgroundColor = \"transparent\";\n      textColor = colors[\"muted-foreground\"];\n      break;\n    case \"outline\":\n      backgroundColor = \"transparent\";\n      textColor = colors.primary;\n      borderColor = colors.border;\n      break;\n    default:\n      backgroundColor = colors.primary;\n      textColor = colors[\"primary-foreground\"];\n  }\n\n  const isIconOnly = !!icon && !label;\n\n  const buttonPadding = isIconOnly\n    ? 0\n    : size === \"sm\"\n    ? 12\n    : size === \"lg\"\n    ? 20\n    : 16;\n  const buttonHeight = size === \"sm\" ? 40 : size === \"lg\" ? 56 : 38;\n  const buttonWidth = isIconOnly ? buttonHeight : undefined;\n  const textSize = size === \"sm\" ? 14 : size === \"lg\" ? 18 : 18;\n\n  return (\n    <TouchableOpacity\n      {...props}\n      onPress={onPress}\n      style={[\n        styles.base,\n        {\n          backgroundColor,\n          paddingHorizontal: buttonPadding,\n          height: buttonHeight,\n          width: buttonWidth,\n          borderColor: borderColor,\n          borderWidth: variant === \"outline\" ? 1 : 0,\n          opacity: disabled ? 0.5 : 1,\n        },\n        style,\n      ]}\n      disabled={disabled}\n    >\n      {icon && (\n        <View\n          style={[styles.icon, iconStyle, isIconOnly && { marginRight: 0 }]}\n        >\n          {React.cloneElement(icon as React.ReactElement, {\n            color: textColor,\n            size: textSize,\n          })}\n        </View>\n      )}\n      {label && (\n        <Text\n          style={[\n            styles.label,\n            { color: textColor, fontSize: textSize },\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n      )}\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  base: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: 8,\n  },\n  icon: {\n    marginRight: 8,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  label: {\n    fontWeight: \"500\",\n    textAlign: \"center\",\n  },\n});\n\nexport { Button };"
    }
  ]
}
