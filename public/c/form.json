{
  "name": "form",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": ["react", "react-native", "react-hook-form"],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "form.tsx",
      "content": "import React, { createContext, useContext } from \"react\";\nimport { View, Text, StyleSheet } from \"react-native\";\nimport { getThemeColors } from \"@/theme/theme-colors\";\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\";\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = useContext(FormFieldContext);\n  const itemContext = useContext(FormItemContext);\n  const { getFieldState, formState } = useFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField deve ser usado dentro de <FormField>\");\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = { id: string };\n\nconst FormItemContext = createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n);\n\nconst FormItem = React.forwardRef<\n  View,\n  React.ComponentPropsWithoutRef<typeof View>\n>(({ style, ...props }, ref) => {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <View ref={ref} style={[styles.formItem, style]} {...props} />\n    </FormItemContext.Provider>\n  );\n});\nFormItem.displayName = \"FormItem\";\n\nconst FormLabel = React.forwardRef<\n  Text,\n  React.ComponentPropsWithoutRef<typeof Text>\n>(({ style, ...props }, ref) => {\n  const { error } = useFormField();\n  const colors = getThemeColors();\n\n  return (\n    <Text\n      ref={ref}\n      style={[\n        styles.formLabel,\n        error ? { color: colors.destructive } : { color: colors.text },\n        style,\n      ]}\n      {...props}\n    />\n  );\n});\nFormLabel.displayName = \"FormLabel\";\n\nconst FormControl = React.forwardRef<\n  View,\n  React.ComponentPropsWithoutRef<typeof View>\n>(({ style, ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } =\n    useFormField();\n\n  return (\n    <View\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error ? formDescriptionId : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      style={[styles.formControl, style]}\n      {...props}\n    />\n  );\n});\nFormControl.displayName = \"FormControl\";\n\nconst FormDescription = React.forwardRef<\n  Text,\n  React.ComponentPropsWithoutRef<typeof Text>\n>(({ style, ...props }, ref) => {\n  const { formDescriptionId } = useFormField();\n\n  return (\n    <Text\n      ref={ref}\n      id={formDescriptionId}\n      style={[styles.formDescription, style]}\n      {...props}\n    />\n  );\n});\nFormDescription.displayName = \"FormDescription\";\n\nconst FormMessage = React.forwardRef<\n  Text,\n  React.ComponentPropsWithoutRef<typeof Text>\n>(({ style, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField();\n  const colors = getThemeColors(); // Pegamos as cores\n  const body = error ? String(error?.message) : children;\n\n  if (!body) {\n    return null;\n  }\n\n  return (\n    <Text\n      ref={ref}\n      id={formMessageId}\n      style={[styles.formMessage, { color: colors.destructive }, style]}\n      {...props}\n    >\n      {body}\n    </Text>\n  );\n});\nFormMessage.displayName = \"FormMessage\";\n\nconst styles = StyleSheet.create({\n  formItem: {\n    marginBottom: 16,\n  },\n  formLabel: {\n    fontSize: 16,\n    marginBottom: 8,\n    fontWeight: \"bold\",\n  },\n  formControl: {},\n  formDescription: {\n    fontSize: 12,\n    color: \"#6b7280\",\n    marginTop: 4,\n  },\n  formMessage: {\n    fontSize: 12,\n    marginTop: 4,\n  },\n});\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n};"
    }
  ]
}
